#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const async = require('async');
const template = require('lodash.template');
var _ = require("lodash");
_.mixin(require("lodash-inflection"));

const json = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const version = json.version;

var cmdValue;
var nameValue;

const DIR_MASK = 0777;

const paths = {
    appBase: '../../app/',
    testBase: '../../test/',
    templates: `${__dirname}/generatorTemplates/`,
}

const acceptableCommands = ['component', 'container', 'reducer', 'actions', 'test'];


function lowerCaseFirstLetter(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
}

function upperCaseFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

function createFile(config, done) {
    fs.readFile(`${paths.templates}${config.templateFile}`, (err, data) => {
        if (err) {
            console.warn("An error occured whilst opening the template file. Output file will be empty");
            data = "";
        }

        if (! config.type) {
            config.type = '';
        }

        const compiledTemplate = template(data);
        const output = compiledTemplate({
            nameUpper: upperCaseFirstLetter(config.name),
            nameLower: lowerCaseFirstLetter(config.name),
            type: config.type,
            typeSingle: _.singularize(config.type),
            pathToCodeToBeTested: config.pathToCodeToBeTested || ''
        });

        console.log(`Creating ${config.filePath}...`);

        if (program.debug) {
            console.log(output);
            done();
        } else {
            fs.writeFile(`${__dirname}/${config.filePath}`, output, done);
        }
    });
}

function createComponent(dir, name, done) {
    createFile({
        name,
        filePath: `${dir}/${upperCaseFirstLetter(name)}.js`,
        templateFile: 'component.js',
    }, done);
}

function createCSS(dir, name, done) {
    createFile({
        name,
        filePath: `${dir}/${upperCaseFirstLetter(name)}.css`,
        templateFile: 'css.js',
    }, done);
}

function createActions(name, done) {
    createFile({
        name,
        filePath: `${paths.appBase}actions/${lowerCaseFirstLetter(name)}.js`,
        templateFile: 'actions.js',
    }, done);
}

function createContainer(name, done) {
    createFile({
        name,
        filePath: `${paths.appBase}containers/${upperCaseFirstLetter(name)}.js`,
        templateFile: 'container.js',
    }, done);
}

function createReducer(name, done) {
    createFile({
        name,
        filePath: `${paths.appBase}reducers/${lowerCaseFirstLetter(name)}.js`,
        templateFile: 'reducer.js',
    }, done);
}

function createTest(type, name, done) {
    if (type !== 'actions') {
        type += 's';
    }

    var pathToCodeToBeTested = `${paths.appBase}${type}/`;

    if (type === `components`) {
        pathToCodeToBeTested += `${upperCaseFirstLetter(name)}/`;
    }

    pathToCodeToBeTested += `${upperCaseFirstLetter(name)}.js`;

    createFile({
        name,
        type,
        filePath: `${paths.testBase}${type}/${upperCaseFirstLetter(name)}.spec.js`,
        templateFile: 'test.js',
        pathToCodeToBeTested
    }, done);
}

program
    .version(version)
    .option('-d, --debug', 'Log results to console instead of writing to a file');

program
    .command('test [type] [name]')
    .description('Generates a test file')
    .action((type, name) => {
        const testTypes = ['component', 'reducer', 'container', 'actions'];

        if (typeof type === 'undefined') {
            console.error('Please specify the type of test');
            process.exit(1);
        }

        if (testTypes.indexOf(type) === -1) {
            console.error(`type must be one of ${testTypes.join('|')}`);
            process.exit(1);
        }

        if (typeof name === 'undefined') {
            console.error('Please specify a name for your component');
            process.exit(1);
        }

        createTest(type, name, err => {
            if (err) {
                console.error('An error occurred whilst saving the file: ' + err);
                process.exit(1);
            }

            console.log('Test generated!');
        });
    });

program
    .command('component [name]')
    .description('Generates a component with matching CSS, actions & test specs')
    .action(name => {
        if (typeof name === 'undefined') {
            console.error('Please specify a name for your component');
            process.exit(1);
        }

        const dir = `${paths.appBase}components/${upperCaseFirstLetter(name)}`;

        async.series([
            function(done) {
                console.log(`Creating ${dir}...`);
                if (! program.debug) {
                    fs.mkdir(`${__dirname}/${dir}`, DIR_MASK, done);
                } else {
                    done();
                }
            },
            function(done) {
                createComponent(dir, name, done);
            },
            function(done) {
                createCSS(dir, name, done);
            },
            function(done) {
                createActions(name, done);
            },
            function(done) {
                createTest('component', name, done);
            },
            function(done) {
                createTest('actions', name, done);
            }
        ], (err) => {
            if (err) {
                console.error("An error occurred whilst generating your files: "+err);
                process.exit(1);
            }
            console.log('Files generated successfully!');
        });
    });

program
    .command('actions [name]')
    .description('Generates an actions file with test spec')
    .action(name => {
        if (typeof name === 'undefined') {
            console.error('Please specify a name for your component');
            process.exit(1);
        }

        async.series([
            function(done) {
                createActions(name, done);
            },
            function(done) {
                createTest('actions', name, done);
            }
        ], (err) => {
            if (err) {
                console.error("An error occurred whilst generating your files: "+err);
                process.exit(1);
            }
            console.log('Files generated successfully!');
        });
    });

program
    .command('container [name]')
    .description('Generates a container file with test spec')
    .action(name => {
        if (typeof name === 'undefined') {
            console.error('Please specify a name for your container');
            process.exit(1);
        }

        async.series([
            function(done) {
                createContainer(name, done);
            },
            function(done) {
                createTest('container', name, done);
            }
        ], (err) => {
            if (err) {
                console.error("An error occurred whilst generating your files: "+err);
                process.exit(1);
            }
            console.log('Files generated successfully!');
        });
    });

program
    .command('reducer [name]')
    .description('Generates a reducer file with test spec')
    .action(name => {
        if (typeof name === 'undefined') {
            console.error('Please specify a name for your reducer');
            process.exit(1);
        }

        async.series([
            function(done) {
                createReducer(name, done);
            },
            function(done) {
                createTest('reducer', name, done);
            }
        ], (err) => {
            if (err) {
                console.error("An error occurred whilst generating your files: "+err);
                process.exit(1);
            }
            console.log('Files generated successfully!');
        });
    });

program
    .command('help')
    .description('Display help text')
    .action(() => {
        program.outputHelp();
    });

program.parse(process.argv);

if (program.debug) {
    console.warn('Running in debug mode. Output will be displayed on the console rather than writing to files.');
}
